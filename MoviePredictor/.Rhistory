swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
rpg1()
rgp1(())
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ .,swiss)
vif(mdl)
mdl2 <- lm(Fertility~.-Examination,swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1) - deviance(fit3)
n <- deviance(fit1) - deviance(fit3)/2
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test((fit3$residuals))
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenSoce, binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000,50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hist[,'date'])
)
as.integer(head(hits[,'date']))
mdl <-glm(visits~date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
md2 <-glm(visits~date + 1, poisson, hits)
mdl2 <-glm(visits~date + 1, poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,
| offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
head(shuttle)
shuttle2 <- shuttle
shuttle2$use<-as.numeric(shuttle2$use=='auto')
fit<-glm(use22~factor(wind)-1, family=binomial, data = shuttle2)
fit<-glm(use2~factor(wind)-1, family=binomial, data = shuttle2)
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
fit<-glm(use2~factor(wind)-1, family=binomial, data = shuttle2)
fit<-glm(use~wind, family = binomial, data = shuttle)
summary(fit)$coef
exp(coef(fit))
0.7777778/0.9686888
exp(cbind(OddsRatio = coef(fit), confint(fit)))
fit<-glm(use2~factor(wind)+factor(magn)-1, family = binomial, data=shuttle2)
summary(fit)$coef
exp(coef(fit))
fit<-glm(use2 ~ factor(wind) + factor(magn) - 1, family = binomial, data = shuttle2)
summary(fit)$coef
exp(coef(fit))
exp(cbind(OddsRatio = coef(fit), confint(fit)))
plot(mtcars$mpg, mtcars$cyl)
plot(mtcars$cyl,mtcars$mpg)
plot(mtcars$wt,mtcars$mpg)
result <- t.test(mpg ~ am)
result$p.value
result$estimate
library(swirl)
swirl()
head(PM2.5)
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
rug(low)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta, lwd=4)
q
)
""
"
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg, ccol = "wheat", main = "Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25_region, pollution)
boxplot(pm25~region, pollution)
boxplot(pm25~region, pollution, "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(east)
east<-subset(pollution, boolean=east)
east<-subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(region == "west", data = pollution , col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
plot(latitude, ppm25)
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm))
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col(pollution$region))
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, faccc=="west")
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
q
q()
plot(WWWusage)
Usage$time
WWWusage
WWWusage$Frequency
Usage <- ts(WWWusage, frequency = 4.16667)
plot(Usage)
Usage <- ts(WWWusage, frequency = 4.16)
plot(Usage)
Usage <- ts(WWWusage, frequency = 4.16667)
plot(Usage)
Usage
Usage <- ts(WWWusage, frequency = 4.2)
Usage
Usage <- ts(WWWusage, frequency = 4.1)
Usage
Usage <- ts(WWWusage, frequency = 4.17)
Usage
Usage <- ts(WWWusage, frequency = 4.18)
Usage
Usage <- ts(WWWusage, frequency = 4.19)
Usage
Usage <- ts(WWWusage, frequency = 4.2)
Usage
Usage <- ts(WWWusage, frequency = 4.3)
Usage
Usage <- ts(WWWusage, frequency = 4.35)
Usage
Usage <- ts(WWWusage, frequency = 4.33)
Usage
Usage <- ts(WWWusage, frequency = 4.31)
Usage
Usage <- ts(WWWusage, frequency = 4.308)
Usage
Usage <- ts(WWWusage, frequency = 4.309)
Usage
Usage <- ts(WWWusage, frequency = 4.3099)
Usage
Usage <- ts(WWWusage, frequency = 4.30999999)
Usage
Usage <- ts(WWWusage, frequency = 4.3099999999999999)
Usage
plot(Usage)
Work <- diff(Usage)
Work <- diff(Usage)
maxWork <- max(Work)
minWork <- min(Work)
plot(Work)
attach(Work)
attach(diff(Usage))
attach(Usage)
Usage
install.packages("iplots", dependencies = TRUE)
library(iplots)
install.packages("rJava")
library(iplots)
library(iplots)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(iplots)
plot(Work)
attach(Work)
attach(datasets)
library(datasets)
attach(datasets)
datasets::
datasets
library(datasets)
?datasets
library(help = "datasets")
attach(WWWusage)
install.packages(rggobi)
install.packages("rggobi", dependencies = TRUE)
library(rggobi)
doodoo <- ggobi(Usage)
library(rggobi)
install.packages("rggobi", dependencies = TRUE)
library(rggobi)
source("http://www.ggobi.org/downloads/install.r")
library(rggobi)
library(rggobi)
library(rggobi)
library(rggobi)
library(rggobi)
plot(Work)
Work
x = 1:24
y = Work
name = letters[1:24]
plot(x,y)
x = 1:50
plot(x,y)
x = 1:30
plot(x,y)
length(x)
length(y)
x = (1:99)/4
length(x)
x
x = (1:99)/4.6
x
x = (1:99)/4.4
x
x = (1:99)/4.2
x
x = (1:99)/4.1
x
plot(x,y)
identify(x, y, labels = name, plot = TRUE)
x(98)
identify(x, y, labels = name, plot = TRUE)
plot(x,y)
identify(x, y, labels = name, plot = TRUE)
plot(Usage)
identify(Usage, labels = name, plot = TRUE)
plot(Work)
identify
identifier = points[1:10]
identifier = points(1:10)
identify(Work, labels = identifier, plot = TRUE)
plot(Work)
identify(Work, labels = points(1:10), plot = TRUE)
?labels
plot(Work)
identify(Work, labels = name, plot = TRUE)
plot(Work)
identify(Work, labels = name, plot = TRUE)
plot(Work)
identify(Work, labels = name, plot = TRUE)
name = letters[1:4]
plot(Work)
identify(Work, labels = name, plot = TRUE)
Work
legend("b=14", "c=-11", "a = +/- 14")
legend("bottomright", y=NULL,"b=14", "c=-11", "a = +/- 14")
legend("bottomright", y=NULL,col = par("b=14"))
legend("bottomright", y=NULL,col = par(b=14))
legend("bottomright", y=NULL)
legend("bottomright", y=NULL, cex = "b=14")
legend("bottomright", y=NULL, title = "Plotted Points")
legend("bottomright")
legend("bottomright", lwd = c(1,1), col = c("blue"))
legend("bottomright",y=NULL, lwd = c(1,1), col = c("blue"))
legend(x = "bottomright",y=NULL, lwd = c(1,1), col = c("blue"))
legend(x = "bottomright",y=NULL, lwd = c(1,1), col = c("blue"), legend = c("4", "6", "8"))
plot(Work)
identify(Work, labels = name, plot = TRUE)
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lwd = c(1,1), col = c("blue"), legend = c("a = +/- 14", "b = 14", "c = -11"))
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = +/- 14", "b = 14", "c = -11"))
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = +/- 14", "b = 14", "c = -11"))
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = 14", "b = 14", "c = -11"))
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = 14", "b = 14", "c = -11"))
lines(Usage)
lines(Usage, col="green")
par(new=TRUE)
plot(Usage)
plot(Work)
identify(Work, labels = name, plot = TRUE)
legend(x = "bottomright",y=NULL, lines(Work, col="blue",lwd =2), legend = c("a = 14", "b = 14", "c = -11"))
# Electricity Consumption
dataFile <- "C:/Users/Hailey/Desktop/2016/blog/2-Electricity Consumption/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
#Plot 1 -- Histogram of Global Power
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
#Plot 2 -- Active Power plotted with Time
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
#Plot 3 -- Energy SubMetering plotted with Time
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1) #kitchen, containing mainly a dishwasher, an oven and a microwave
subMetering2 <- as.numeric(subSetData$Sub_metering_2) #laundry room, containing a washing-machine, a tumble-drier, a refrigerator and a light
subMetering3 <- as.numeric(subSetData$Sub_metering_3) #electric water-heater and an air-conditioner
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
#Plot 4 -- Comparison of Active & SubMetering to New plots-> Voltage & Reactive Power
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
#Plot 5 -- Classification Tree
library(rpart)
# grow tree
#fit <- rpart(dataFile ~ Age + Number + Start,
#             method="class", data=dataFile)  #grow tree
dataFile$
w
clc
library(randomForest) # Random Forest prediction
fit <- randomForest(Global_active_power ~ Voltage + Global_reactive_power + Global_intensity, data=subSetData)
fit1 <- randomForest(Global_active_power ~ Sub_metering_1 + Sub_metering_2 + Sub_metering_3 ,data=subSetData)
print(fit) # view results
print(fit1)
importance(fit) # importance of each predictor
importance(fit1)
install.packages("randomForest")
library(randomForest) # Random Forest prediction
fit <- randomForest(Global_active_power ~ Voltage + Global_reactive_power + Global_intensity, data=subSetData)
fit1 <- randomForest(Global_active_power ~ Sub_metering_1 + Sub_metering_2 + Sub_metering_3 ,data=subSetData)
print(fit) # view results
print(fit1)
importance(fit) # importance of each predictor
importance(fit1)
rfNews()
library(randomForest) # Random Forest prediction
fit <- randomForest(Global_active_power ~ Voltage + Global_reactive_power + Global_intensity, data=subSetData)
fit1 <- randomForest(Global_active_power ~ Sub_metering_1 + Sub_metering_2 + Sub_metering_3 ,data=subSetData)
fit <- randomForest(globalActivePower ~ voltage + globalReactivePower + as.numeric(Global_intensity), data=as.numeric(subSetData))
fit <- randomForest(globalActivePower ~ voltage + globalReactivePower + as.numeric(Global_intensity), data=datetime)
globalIntensity <- as.numeric(subSetData$Global_intensity)
fit <- randomForest(globalActivePower ~ voltage + globalReactivePower + globalIntensity, data=datetime)
fit1 <- randomForest(globalActivePower ~ subMetering1 + subMetering2 + subMetering3 ,data=datetime)
print(fit) # view results
print(fit1)
importance(fit) # importance of each predictor
importance(fit1)
install.packages("party")
library(party)
plot(fit, main = 'Conditional Inference Tree for Electricity Consumption')
fit2 <- ctree(globalActivePower ~ voltage + globalReactivePower + globalIntensity , data = na.omit(cu.summary))
install.packages("rpart")
library(rpart)
printcp(fit) # display the results
fit <- rpart(globalActivePower ~ voltage + globalReactivePower + globalIntensity, data=datetime) #<- better option
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE,
main="Classification Tree for Electricity Consumption")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
post(fit, file = "C:/Users/Hailey/Desktop/2016/blog/2-Electricity Consumption/tree.ps",
title = "Classification Tree for Electricity Consumption")
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
plot(pfit, uniform=TRUE,
main="Pruned Classification Tree for Electricity Consumption")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
post(pfit, file = "c:/Users/Hailey/Desktop/2016/blog/2-Electricity Consumption/ptree.ps",
title = "Pruned Classification Tree for Electricity Consumption")
printcp(fit) # display the results
install.packages('blogdown')
blogdown::update_hugo()
blogdown::update_hugo()
blogdown::new_site()
blogdown::new_site()
blogdown::new_site()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(tidyverse)
library(reticulate)
library(lubridate) #To deal with date fields
library(shiny)
library(scales)
theme_set(theme_light())
# Chunk 3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
url_LondonHousePrices = "https://data.london.gov.uk/download/uk-house-price-index/70ac0766-8902-4eb5-aab5-01951aaed773/UK%20House%20price%20index.xls"
properties = pd.read_excel(url_LondonHousePrices, sheet_name='Average price', index_col= None)
properties.head()
# Chunk 4
properties <- py$properties
glimpse(properties)
properties <- properties %>% rename(Date = `Unnamed: 0`) %>%
select(-c(`Unnamed: 34`, `Unnamed: 37`, `Unnamed: 47`))
lifecycle::last_warnings()
install.packages("dplyr")
install.packages("dplyr")
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
---
title: "Ski Data"
author: "H.Gryk"
date: "July 22, 2020"
output: html_document
runtime: shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```
## Introduction
This Rmarkdown document shows the use of both R and Python for analyzing the London Boroughs dataset. The `reticulate` library allows us to use Python code in an R environment.
load("~/.RData")
setwd("~/GitHub/projects/MoviePredictor")
setwd("~/GitHub/projects/MoviePredictor/MovieRecApp")
library(shiny)
runApp("C:\Users\Hailey\Documents\GitHub\projects\MoviePredictor\MovieRecApp\app.R")
runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp\app.R")
runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp/app.R")
runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp/app.R")
runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp/app.R")
shiny::runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp/app.R")
shiny::runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp/app.R")
runApp()
runApp()
runApp(ui, server)
runApp(MovieRecApp)
setwd("~/GitHub/projects/MoviePredictor")
setwd("~/GitHub/projects/MoviePredictor")
runApp(MovieRecApp)
runApp("/Users/Hailey/Documents/GitHub/projects/MoviePredictor/MovieRecApp")
sessionInfo()
setwd("~/GitHub/projects/MoviePredictor/MovieRecApp")
runApp(App.R)
runApp()
shinyApp(ui = ui, server = server)
setwd("~/GitHub/projects")
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
setwd("~/GitHub/projects/MoviePredictor/MovieRecApp")
runApp('test')
runApp('MovieRecApp')
setwd("~/GitHub/projects/MovieRecApp")
runApp('MovieRecApp')
setwd("~/GitHub/projects/MoviePredictor")
runApp('MovieRecApp')
runApp('MovieRecApp')
setwd("~/GitHub/projects/test")
runApp('test')
setwd("~/GitHub/projects")
runApp('test')
setwd("~/GitHub/projects/MoviePredictor")
runApp('MovieRecApp')
library(rsconnect)
library(shiny)
deployApp('MovieRecApp')
