install.packages("imdbapi")
library(imdbapi)
help(imdbapi)
help(imdbapi)
imdbapi::omdb_api_key()
knitr::opts_chunk$set(echo = FALSE)
temp <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-25m.zip",temp)
url <-"http://files.grouplens.org/datasets/movielens/ml-25m.zip"
temp <- tempfile()
temp2 <- tempfile()
download.file(url, temp)
unzip(zipfile = temp, exdir = temp2)
#data <- read_xls(file.path(temp2, "fire station x_y.xls"))
movies <- read.csv(unz(temp, "movies.csv"))
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip/ml-25m/"
movies <- read.csv(zip.file.extract(fileLoc, "movies.csv"))
knitr::opts_chunk$set(echo = FALSE)
library(utils)
library(recommenderlab)
install.packages('recommenderlab')
library(utils)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
install.packages('reshape2')
library(utils)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip/ml-25m/"
movies <- read.csv(zip.file.extract(fileLoc, "movies.csv"))
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip/ml-25m/"
movies <- read.csv(unzip(fileLoc, "movies.csv"))
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip/ml-25m/"
movies <- read.csv(unzip("movies.csv",fileLoc))
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip/ml-25m/"
unzip(fileLoc)
movies <- read.csv(unzip("movies.csv",fileLoc))
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip/ml-25m/"
unzip(fileLoc)
movies <- read.csv("movies.csv")
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
unzip(fileLoc)
movies <- read.csv("/ml-25m/movies.csv")
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
unzip(fileLoc)
movies <- read.csv("/ml-25m/movies.csv")
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
ratings <- read.csv( "ml-25m/ratings.csv")
tags <- read.csv("ml-25m/tags.csv")
View(movies)
View(ratings)
View(tags)
length(movies)
size
size(movies)
nrow(movies)
length(genre_list)
# preprocessing data
genres <- as.data.frame(movies$genres, stringsAsFactors = FALSE)
genres2 <- as.data.frame(tstrsplit( genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:10)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") #list of all the genres
#genre_matrix <-matrix(0, nrow(movies)+1, )
length(genre_list)
# preprocessing data
genres <- as.data.frame(movies$genres, stringsAsFactors = FALSE)
genres2 <- as.data.frame(tstrsplit( genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:10)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") #list of all the genres
genre_matrix <-matrix(0, nrow(movies)+1, length(genre_list)) #empty matrix, no movies + 1, no genres
genre_matrix[1,] <- genre_list # populate genres in first row
colnames(genre_matrix) <- genre_list # set column names with genre list
#iterate through matrix
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
}
#convert into dataframe
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])
} #convert from characters to integers
#Create a matrix to search for a movie by genre:
years <- as.data.frame(movies$title, stringsAsFactors=FALSE)
library(data.table)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
years <- as.data.frame(substr(substrRight(substrRight(years$`movies$title`, 6),5),1,4))
search_matrix <- cbind(movies[,1], substr(movies[,2],1,nchar(movies[,2])-6), years, genre_matrix2)
colnames(search_matrix) <- c("movieId", "title", "year", genre_list)
write.csv(search_matrix, "search.csv")
search_matrix <- read.csv("search.csv", stringsAsFactors=FALSE)
subset(search_matrix, Action ==1 & year == 1995)$title
subset(search_matrix, Drama ==1 & year == 1995)$title
subset(search_matrix, Drama ==1 & year == 2000)$title
subset(search_matrix, Drama ==1 & year == 2005)$title
subset(search_matrix, Drama ==1 & year == 2019)$title
subset(search_matrix, Drama ==1 & year == 2020)$title
subset(search_matrix, Crime ==1 & year == 2019)$title
ratings.head()
ratings[,5]
ratings[5,]
3.5/10
ratings[1:5,]
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings/10
# convert binaryratings matrix to the correct format:
binaryratings2 <- dcast(binaryratings, movieId~userId, value.var = "rating", na.rm=FALSE)
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings/10
# convert scaleratings matrix to the correct format:
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
binaryratings <- ratings
for (i in 1:nrow(binaryratings)){
if (binaryratings[i,3] > 3){
binaryratings[i,3] <- 1
}
else{
binaryratings[i,3] <- -1
}
}
knitr::opts_chunk$set(echo = FALSE)
library(utils)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
ratings <- read.csv( "ml-25m/ratings.csv")
tags <- read.csv("ml-25m/tags.csv")
mv_tags <- read.csv("ml-25m/genome-scores.csv")
mv_tags_desc < tags <- read.csv("ml-25m/genome-tags.csv")
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
ratings <- read.csv( "ml-25m/ratings.csv")
library(utils)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
ratings <- read.csv( "ml-25m/ratings.csv")
# tags <- read.csv("ml-25m/tags.csv")
mv_tags <- read.csv("ml-25m/genome-scores.csv")
mv_tags_desc < tags <- read.csv("ml-25m/genome-tags.csv")
mv_tags_desc <- read.csv("ml-25m/genome-tags.csv")
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings/10
# convert scaleratings matrix to the correct format:
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
View(movies)
scaleratings[5,]
scaleratings[1:5,]
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings
scaleratings <- scaleratings$rating/10
# convert scaleratings matrix to the correct format:
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
scaleratings$rating
scaleratings.rating
scaleratings[1:5,]
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings
scaleratings <- ratings$rating /10
# convert scaleratings matrix to the correct format:
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings
# convert scaleratings matrix to the correct format:
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
View(scaleratings)
scaleratings$rating / 10
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings
# convert scaleratings matrix to the correct format:
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings
scaleratings <- scaleratings$rating / 10
knitr::opts_chunk$set(echo = FALSE)
library(utils)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
fileLoc <-"/Users/Hailey/Documents/GitHub/projects/MoviePredictor/ml-25m.zip"
#unzip(fileLoc)
movies <- read.csv("ml-25m/movies.csv")
ratings <- read.csv( "ml-25m/ratings.csv")
# tags <- read.csv("ml-25m/tags.csv")
mv_tags <- read.csv("ml-25m/genome-scores.csv")
mv_tags_desc <- read.csv("ml-25m/genome-tags.csv")
# preprocessing data
genres <- as.data.frame(movies$genres, stringsAsFactors = FALSE)
genres2 <- as.data.frame(tstrsplit( genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:10)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") #list of all the genres
genre_matrix <-matrix(0, nrow(movies)+1, length(genre_list)) #empty matrix, no movies + 1, no genres
genre_matrix[1,] <- genre_list # populate genres in first row
colnames(genre_matrix) <- genre_list # set column names with genre list
#iterate through matrix
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
}
#convert into dataframe
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])
} #convert from characters to integers
#Create a matrix to search for a movie by genre:
years <- as.data.frame(movies$title, stringsAsFactors=FALSE)
library(data.table)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
years <- as.data.frame(substr(substrRight(substrRight(years$`movies$title`, 6),5),1,4))
search_matrix <- cbind(movies[,1], substr(movies[,2],1,nchar(movies[,2])-6), years, genre_matrix2)
colnames(search_matrix) <- c("movieId", "title", "year", genre_list)
write.csv(search_matrix, "search.csv")
search_matrix <- read.csv("search.csv", stringsAsFactors=FALSE)
# at this point we can search for movies with the following:
#subset(search_matrix, Crime ==1 & year == 2019)$title
View(search_matrix)
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings
scaleratings$rating <- scaleratings$rating / 10
View(scaleratings)
scaleratings[1,1:3]
# ratings are on a larger scale than the tag comparison result will be so scale the ratings.
scaleratings <- ratings[,1:3]
scaleratings$rating <- scaleratings$rating / 10
View(scaleratings)
scalerratings2 <- dcast(scalerratings, movieId~userId, value.var = "rating", na.rm=FALSE)
scaleratings2 <- dcast(scaleratings, movieId~userId, value.var = "rating", na.rm=FALSE)
scaleratings2 <- dcast(scaleratings[1:100,], movieId~userId, value.var = "rating", na.rm=FALSE)
View(scaleratings2)
scaleratings2 <- dcast(scaleratings[1:100,], movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(scaleratings2)){
scaleratings2[which(is.na(scaleratings2[,i]) == TRUE),i] <- 0
}
scaleratings2 = scaleratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds
View(scaleratings2)
scaleratings2 <- dcast(scaleratings[1:10000,], movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(scaleratings2)){
scaleratings2[which(is.na(scaleratings2[,i]) == TRUE),i] <- 0
}
scaleratings2 = scaleratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds
View(scaleratings2)
scaleratings2 <- dcast(scaleratings[1:100000,], movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(scaleratings2)){
scaleratings2[which(is.na(scaleratings2[,i]) == TRUE),i] <- 0
}
scaleratings2 = scaleratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds
